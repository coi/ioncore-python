# $Id: useragent.krb 2011-12-06 pckediya $
#
#
#
##
##COMMITMENT
##

# it is a violated commitment if antecedent is satisfied but consequent is not
violated_commitment
	use violated_commitment($id, $debtor,$creditor,$antecedent,$consequent)
	when
	    detached_commitment(commitment, $id, $creditor,$debtor,$antecedent,$consequent)


# it is a pending commitment if antecedent is satisfied but consequent is not and
# we are looking at it from the perspective of the debtor
detached_commitment
	use detached_commitment($id, $debtor,$creditor,$antecedent,$consequent)
	when
	    pending_norm(commitment, $id, $debtor,$creditor,$antecedent,$consequent)

# it is a pending sanction if antecedent is satisfied but consequent is not
pending_sanction
	use pending_sanction($id, $debtor,$creditor,$antecedent,$consequent)
	when
	    pending_norm(sanction, $id, $debtor,$creditor,$antecedent,$consequent)

# it is a pending norm if antecedent is satisfied but consequent is not
pending_norm
	use pending_norm($norm_type, $id, $debtor,$creditor,$antecedent,$consequent)
	when
	    org_agent_facts.norm($norm_type, $id, $debtor,$creditor,$antecedent,$consequent)
	    python print 'checking consequent',$consequent
	    condition($antecedent)
	    notany
	        condition($consequent)

# it is a satisified commitment if consequent is satisified
satisfied_commitment
	use satisfied_commitment($id, $debtor,$creditor,$antecedent,$consequent)
	when
	    org_agent_facts.norm(commitment, $id, $debtor,$creditor,$antecedent,$consequent)
	    condition($consequent)
#
##POWER
power
    use power($debtor, $creditor, $antecedent, $consequent)
    when
        org_agent_facts.power($debtor,$creditor,$antecedent,$consequent)

power_dontcare
    use power($debtor, $creditor, $antecedent, $consequent)
    when
        org_agent_facts.power($debtor,DONTCARE,$antecedent,$consequent)
#
##AUTHORIZATION
authorization
    use authorization($id, $debtor, $creditor, $antecedent, $consequent)
    when
        org_agent_facts.norm('authorization',$id, $debtor,$creditor,$antecedent,$consequent)

authorization_dontcare
    use authorization($id, $debtor, $creditor, $antecedent, $consequent)
    when
        org_agent_facts.norm(authorization,$id,$debtor,DONTCARE,$antecedent,$consequent)

norm
    use norm($norm, $id, $debtor, $creditor, $antecedent, $consequent)
    when
        org_agent_facts.norm($norm,$id,$debtor,$creditor,$antecedent,$consequent)



#we expect formula to be generated from the following production rule
# $event -> some_event
# $stative -> ($id, norm, state)
# $agent -> some_user_id
# $formula -> $event|$stative|($formula)|($formula,OR,$formula)| ($formula,AND,$formula)
#
# some_event and some_user_id are string literals, example pay and jsmith
#
# examples:
#	(a)
#	(a, AND, b), ((a, AND, b))
#	(a, OR, b), ((a, OR, b))
#   (((a, AND, b), OR, (c, AND, d)), OR,((e, AND, f), OR, (g, OR, h)))
#	(a, AND, (b,AND,(c,OR,(d,AND,e))))
#	((b,AND,c),OR,(a,AND,d))
##
##SERVICE_INSTANCES
##
##
serviceinstances
	use service_instances($i)
	when
		$i in range(2,10)
		notany
			org_agent_facts.service_instances($i)
##CONDITIONS
##
####
####EVENT
####

condition_event
	use condition($a)
	when
	    python print 'condition event', $a
	    org_agent_facts.event($a)

condition_parenthetical_event
	use condition(($a))
	when
	    python print 'condition parenthetical event', $a
	    org_agent_facts.event($a)

condition_stative
	use condition($a)
	when
	    python print 'condition statives', $a
	    check len($a) == 5
	    python 'check stative length',$a,len($a)
	    python state,debtor,creditor,antecedent,consequent=$a
	    $state=state
	    $debtor=debtor
	    $creditor=creditor
	    $antecedent=antecedent
	    $consequent=consequent
	    org_agent_facts.stative($state,$debtor,$creditor,$antecedent,$consequent)

#consequent example:
#request example request('negotiate_resource', 'shenrie', 'glider55', {'duration': 5})

condition_request
	use condition($a)
	when
	    python print 'check req length',$a,len($a)
	    check len($a) == 4
	    python 'check req length',$a,len($a)
	    python request,request_type,requester,servicer=$a
	    $request=request
	    $request_type=request_type
	    $requester=requester
	    $servicer=servicer
	    org_agent_facts.request($request_type,$requester,$servicer,$parameter)

#condition_service
#	use condition($a)
#	when
#	    check len($a) == 2
#	    python service_type,parameters=$a
#	    $service_type=service_type
#	    $parameters=parameters
#	    python requester,servicer,parameter=$parameters
#	    $requester=requester
#	    $servicer=servicer
#	    $parameter=parameter
#	    org_agent_facts.$service_type($requester,$servicer,$parameter)

#consequent example: (norm,(commitment,COM3,(request,get_temp,shenrie,glider55),get_temp)))
#norm example: norm(commitment, COM1, glider55, shenrie, antecedent, consequent)
condition_norm
    use condition($a)
    when
        check len($a)==2
        python norm,parameter=$a
        $norm=norm
        $parameter=parameter
        python norm_type,id,antecedent,consequent=$parameter
        $norm_type=norm_type
        $id=id
        python print 'checking norm',$norm_type,$id
        org_agent_facts.norm($norm_type,$id,$_debtor,$_creditor,$_antecedent,$_consequent)


predicate_condition
	use condition($antecedent)
	when
	    python print 'check predicate'
	    check len($antecedent)==3
	    python predicate,predicate_type,parameters=$antecedent
	    check predicate=='predicate'
	    $predicate_type=predicate_type
	    $parameters=parameters
	    python print "commitments antecedent", $antecedent, $predicate_type, $parameters
	    org_agent_facts.$predicate_type($parameters)

condition_predicate
	use pcondition($a)
	when
	    python print "h"
	    org_agent_facts.predicate($b,$c)
	    python print "h",$c
	    org_agent_facts.$b($c)


test_patterned_event
	use pevent($a)
	when
	    python event_type, parameters=$a
	    $event_type=event_type
	    $parameters=parameters

test_stative
	use Xstative($a)
	when
	    org_agent_facts.stative($a)
test_stative2
	use Ostative($state,$debtor,$creditor,$antecedent,$consequent)
	when
	    org_agent_facts.stative($state,$debtor,$creditor,$antecedent,$consequent)

####
####EVENT
####
##
##
####
####AND CONDITIONS
####
######
######AND CONDITIONS BASE CASE
######
and_condition_event_base_case
	use condition($a,AND,$b)
	when
		condition($a)
		condition($b)
and_condition_event_parenthetical_base_case
	use condition(($a,AND,$b))
	when
		condition($a)
		condition($b)
####
####AND CONDITIONS
####
##
##
####
####OR CONDITIONS
####
######
######OR CONDITIONS BASE CASE
######
or_condition_event_base_a
	use condition($a,OR,$b)
	when
		condition($a)
or_condition_event_base_b
	use condition($a,OR,$b)
	when
		condition($b)
or_condition_base_parenthetical_a
	use condition(($a,OR,$b))
	when
		condition($a)
or_condition_base_parenthetical_b
	use condition(($a,OR,$b))
	when
		condition($b)

####
####OR CONDITIONS
####
##
##CONDITIONS
##


